- React é uma bilbioteca para criação de interface
- utilizado para construir SPAs (Single Page Application) - um arquivo de index para rodar toda a aplicação
- Baseado em componentes
- Utiliza o JSX para renderização HTML
- e aplica o Virtual DOM para realizar as alterações no DOM
- Pode ser adicionado a um projeto ou criar um projeto com ele



================ Como instalar o React =========================

- Para instalar o React vamos utilizar uma ferramenta chamada Create React Application
- Revebemos todos arquivos da biblioteca e termos como executa-la
- Para utilizar precisamos de note e também npm
- Esta ferramenta também otimiza o app gerado para produção
- É possivel iniciar aplicação com o npm start


= npx create-react-app my_app


Apos a instalação 
- README.md - arquivo de documentação
- package.json - arquivo que lista as dependencia e também scripts que executamos
- package-lock.json - semelhante ao package.json
- gitignore - ignora arquivos
- node é a pasta que guarta tanto as proprias dependencia quanto as do react

Dentro da public 
- robots.txt - leitura de robots
- manifest.json - manifesto de projeto
-index.html - Ponto de partida onde o React trabalhara encima dele
    dentro do arquivo a uma div root em que ele executa o react

Dentro da scr
- index.js - aqruivo base que realiza o bootstrap onde ele importa o app e executa o root
- index.css - estilização 
- app.test.js - para realizar testes
- app.js - Parte em que realiza a estrutura do codigo, tudo que alterar nele reflitira na tela


============================ JSX ================================
- O JSX é como um HTML, porém dentro do JSX
- É a principal maneira de escrever HTML com o React
- Podemos interpolar variaveis, inserindo entre {}
- É possivel executar funções em JSX
- Inserir valores em atributos de tags também

algumas regras normais que no HTML não daria erro, como abrir duas tags de abertura <h1><h1></h1> , Ele ira acussar um erro no navegador e no terminal, pois tecnicamente
estamos codando em JS, então ele esta sempre validando as linhas


- interpolar variaveis
    Quando é criado uma variavel no React é trabalhado dentro de uma função no JSX, quando criamos algo que não esta sendo usado, ele também reverencia, da um aviso
    Otmização no React é levada bem a serio


=================== Componentes ===============================
- Permite dividir a aplicação em partes
- Os componentes renderizam JSX, assim como o app.js(que é um componente)
- Pouco codigo
- Precisamos cirar um arquivo de componente
- E importa-lo onde precisamos utilizar
- Normalmente fica em uma pasta chamada components


---- Props -----> propriedades
- Valores passados para os componentes
- Podemos deixa-los dinamicos
- O valor é passado como um atributo na chamada de componente
- E precisa ser resgatado dentro de uma propriedade/argumento chamada props na função de definição de componente
- As props são somente de leitura


============ Adição de CSS ======================================
- O CSS pode ser adicionado de forma global na aplicação, por meio do arquivo index.css por exemplo
- Porém é possivel estilizar a niveis de componentes
- Utilizamos o CSS modules para isso
- Basta criar um arquivo como Componente.module.css
- E chamar este CSS de componente


Para entender melhor o CSS modules, é como se ele fosse um modelo especifico para um componente, então quando improtamos ele para um componente
mesmo que ele tenha um CSS definito para a tag ele sobrescrevera par ao modelo definido para aquele componente

Por React ser uma junção de HTML e JS acaba por cão entender alguns comando como no caso da estilização e recomendavel evitar usar "-" para separação de nomes
pois no momento de fazer o uso da CSS o JS acaba por não entender o que estamos chamando

================= Fragmentos =========================

- Os React Fragments permite a criação de componentes sem elemento partida
- O propósito é descompilar os nós do DOM
- A sintaxe é <> e </>, não há nome para a tag
- Criamos no proprio JSX

Servira para simplificar o DOM excluido elementos que não estamos utilizando ou esta sme um funcionalidade necessaria


========== Props avançado ===============
- Podemos definir os tipos para as props, realizando uma especie de validação
- Definido em um objeto chamado PropTypes no proprio componente
- e ainda ha a possibilidade de definir um valor padrao
- neste caso utilizamos o objeto defaultProps


=========== Eventos ===================
- Os eventos de React são os mesmos eventos do DOM
- Ou seja, temos eventos para responder a um clcik
- O evento é atrelado a uma tag que irá executá-lo
- Geralmente um método é atribuido ao evento (função)
- Este método deve ser criado um componente

======= useState ==========
- o useState é um hook do React
- Com ele conseguimos manusear o estado de um componente de forma simples
- Este hook funciona muito bem com eventos
- Podemos atrelar um evento a mudança de state

======== Métodos por props ========================
- Os metodos também podem ser passados por props
- ou seja, um componente filho pode ativar o metodo do seu ancestral
- Vamos acessar o metodo por meio de um evento
- A sintaxe é a mesma de um props de dados props.meuEvento


========= renderização por coindição =============
- Podemos atrelar a exibição de um elemento a um if 
- Esta ação é uma chamada de renderização condicional
- Envolvemos as tags em chaves {}
- Como as chaves executam JS, criamos nossa condiçao
- é possivel usar state oara criar condições

========== Renderização de listas ===========
- Para renderizar uma lista vamos primeiramente precisar de um array
- depois utilizamos a função map, para recorrer cada um dos itens
- Podendo assim renderizar algo na tela
- É possivel unir operadores condicionais com a renderização de listas

========== State Lift ======================
- State lift é uma tecnica utilizada para compartilhar state
- É normal varios componentes dependerem do mesmo estado
- Então precisamos elevar o nivel do mesmo a um compoente pai 
- Então centralizamos o state no pai, e definimos quem usa e quem define (setState)

============ React Router ============
- O React Router é um pacote para mudança de URLs de aplicação
- Podemos assim acessar outras views, sem o page reload
- Trocando apenas uma parte do layout da aplicação, ou seja o que muda de view para view
- Precisamos instalar este pacote no projeto
- E também realizarmos algumas mudanças em como o App é estruturado

para instalar - npm install react-router-dom

apos é necessario importar os seguintes pacotes que foram instalados
    import { BrowserRouter as Router, Switch, Route, Link } from "react-router-dom";

    Crie uma file para navegacao, como no caso a NavBar, e utilize como componente para facilitar a modificação, e então bote para
    envolver o codigo em um router

    <Router>
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        <li>
          <Link to="/empresa">Empresa</Link>
        </li>
        <li>
          <Link to="/contato">Contato</Link>
        </li>
      </ul>
    </Router>

    Adicionar o <Link> para dizer qual será o link da URLs

Dentro da App adicione quais serão os arquivos acessados pelo routes
    e usar o switch(Routes) para dizer qual page deve ser utilizada
    <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/empresa" element={<Empresa />} />
        <Route path="/contato" element={<Contato />} />
      </Routes>

      element e o que substitui o exact, pois o React não utiliza mais, path dira qual o link

Você pode utilizar um Layout para definir componentes que sempre estarão como principais, e o page para estruturar o que precisar neles, pois serão
as paginas que você ira acessar


========== React Icons ==============
- O React Icons é um pacote de icones externo
- Precisamos adicionar ao projeto por meio do npm 
- Ele nos permite adicionar icones ao projeto com uma sintaxe parecida a de componentes
- Além disso há uma grande quantidade de ícones disponíveis

Para instalar - npm install react-icons
